.. _ja_arch:

アーキテクチャ
========================

LS4は、高い拡張性と可用性を持った分散ストレージシステムです。
ここではそのアーキテクチャについて述べます。

.. contents::
   :backlinks: none
   :local:

データモデル
----------------------

LS4は、 **キー** （文字列）によって識別される *オブジェクト* の集合を保存します。それぞれのオブジェクトは、 **データ** （バイト列）と **属性** （連想配列）を持ちます。

オブジェクトは複数の **バージョン** を持つことができます。
明示的に削除しない限りは、古いバージョンのオブジェクトを取り出すことができます。
それぞれのバージョンは、名前または作成時刻（協定世界時のUNIX時刻）で指定することができます。

::

      キー                        オブジェクト
                        データ                    属性
                 +-----------------+---------------------------------+       ---+
    "image1" =>  |  "HTJ PNG ..."  |  { type:png, model:NEX-5 }      |--+       |
                 +-----------------+---------------------------------+  |--+    | それぞれのオブジェクトは
                   +-----------------+----------------------------------+  |    | 複数のバージョンを持つことができる
                      +----------------+-----------------------------------+    |
                                                                             ---+
                 +-----------------+---------------------------------+
      key    =>  |  bytes .......  |  { key:value, key:value, ... }  |--+
                 +-----------------+---------------------------------+  |--+
                   +-----------------+----------------------------------+  |
                      +----------------+-----------------------------------+
    
      ...    =>  ...

バージョニングをサポートしていないMDSプラグインもあります（関連： :ref:`ja_plugin` ）。


サーバの種類
----------------------

LS4は、次の4種類のサーバプログラムから構成されます：

  DS (Data Server)
    コンテンツを保存したりレプリケーションしたりします。
  MDS (Metadata Server)
    コンテンツのメタデータを保存します。メタデータには「コンテンツがどこに保存されているか」を示す情報も含まれています。MDSには `Tokyo Tyrant <http://fallabs.com/tokyotyrant/>`_ などのストレージシステムを利用します。(:ref:`ja_plugin`)
  GW (Gateway)
    アプリケーションからの要求を受け取り、適切なDSに中継します。DS は GW の機能も併せ持っているため、DS を GW として使うこともできます。
  CS (Configuration Server)
    クラスタの設定情報を管理します。また、DSの状態を監視し、故障したDSを自動的に切り離したりします。

**レプリカセット** は、複数のDSで構成されるグループです。同じレプリカセットに属するDSは、同じデータをレプリケーションして保存しています。

レプリカセットはいつでも追加することができ、追加することでストレージの容量やI/O性能を向上させることができます。

::

                        App     App     App
                         |       |       |  HTTP または MessagePack-RPC
            ----------- GW      GW      GW（またはDS）
           /            /
    +-------------+    |  GWはアプリケーションからDSにリクエストを中継
    |             |    |
    |             |  +----+   +----+   +----+
    |     MDS     |  | DS |   | DS |   | DS |
    |             |  |    |   |    |   |    | レプリカセット
    |             |  | DS |   | DS |   | DS | 同じレプリカセット内のDSは同じデータを保存
    +-------------+  |    |   |    |   |    |
    MDS              | DS |   | DS |   | DS | ... レプリカセットはいつでも追加可能
    メタデータを保存	+----+   +----+   +----+
                         \       |       /
                          -----  |  ----- CSはクラスタの設定情報を管理
                               \ | /
                                CS


操作
----------------------

データの保存
^^^^^^^^^^^^^^^^^^^^^^

GW または DS は、アプリケーションからの要求を MDS と DS に中継します。

MDSは「どこにデータが保存されているか」を保存し、DS は実際にデータを保存します。

::

                        App     App     App
           (2)       (1) |       |       |
            ----------- GW      GW      GW
           /            /
    +-------------+    |
    |             |    | (3)
    |             |  +----+   +----+   +----+
    |     MDS     |  | DS |   | DS |   | DS |
    |             |  | | (4)  |    |   |    |
    |             |  | DS |   | DS |   | DS |
    +-------------+  | | (4)  |    |   |    |
                     | DS |   | DS |   | DS |
                     +----+   +----+   +----+

1. アプリケーションは GW か DS に要求を送信します。どの GW や DS を選んでも構いません。
2. GW（やDS）は、実際にデータを保存するレプリカセットを選択し、そのIDをMDSに書き込みます。レプリカセットの選択には、重み付きのround-robinアルゴリズムを使います。
3. GW（やDS）は、レプリカセット内のDSに追加要求を送信します。
4. レプリカセット内の他のDSは、保存されたデータをレプリカセット

関連： :ref:`ja_api`


データの取得
^^^^^^^^^^^^^^^^^^^^^^

MDS は、どのレプリカセットに実際のデータが保存されているかを知っています。このため GW（やDS）は、まずMDSに問い合わせ、その後データを DSから取得します。

::

                        App     App     App
           (2)       (1) |       |       |
            ----------- GW      GW      GW
           /            /
    +-------------+    |
    |             |    | (3)
    |             |  +----+   +----+   +----+
    |     MDS     |  | DS |   | DS |   | DS |
    |             |  |    |   |    |   |    |
    |             |  | DS |   | DS |   | DS |
    +-------------+  |    |   |    |   |    |
                     | DS |   | DS |   | DS |
                     +----+   +----+   +----+

1. アプリケーションは GW か DS に要求を送信します。どの GW や DS を選んでも構いません。
2. GW（またはDS）は、検索クエリをMDSに送信します。MDSは実際にデータを保存しているレプリカセットのIDを返します。
3. GW（またはDS）は、そのレプリカセットの中から DS を1台選択し、取得要求を送信します。DS は位置を考慮したアルゴリズムによって選択されます。


関連： :ref:`ja_api`

関連： :ref:`ja_howto_location`


属性の保存と取得
^^^^^^^^^^^^^^^^^^^^^^

属性は MDS に保存されています。

::

                        App     App     App
           (2)       (1) |       |       |
            ----------- GW      GW      GW
           /
    +-------------+
    |             |
    |             |  +----+   +----+   +----+
    |     MDS     |  | DS |   | DS |   | DS |
    |             |  |    |   |    |   |    |
    |             |  | DS |   | DS |   | DS |
    +-------------+  |    |   |    |   |    |
                     | DS |   | DS |   | DS |
                     +----+   +----+   +----+

1. アプリケーションは GW か DS に要求を送信します。どの GW や DS を選んでも構いません。
2. GW（またはDS）は、クエリをMDSに送信します。

関連： :ref:`ja_api`


管理と監視
----------------------

すべての DS は CS に登録されています。管理ツールや監視ツールは、CS の設定を書き換えたり、CS からサーバの一覧表を取得することで、すべての DS を一斉に制御します。

::

                     (1)      (2)
      Administrator --> ツール --> CS
                         / \
    +-------------+     |   -------------  (3)
    |             |     |       |        \
    |             |  +----+   +----+   +----+
    |     MDS     |  | DS |   | DS |   | DS |
    |             |  |    |   |    |   |    |
    |             |  | DS |   | DS |   | DS |
    +-------------+  |    |   |    |   |    |
                     | DS |   | DS |   | DS |
                     +----+   +----+   +----+

1. 管理者（あなた）が管理ツールを実行します。
2. 管理ツールは、CS からクラスタの情報を取得します。
3. 管理ツールは、状態や統計情報を DS から取得して表示します。


次のステップ： :ref:`ja_build`

